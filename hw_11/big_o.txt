Завдання 1.
Напишіть в нотації Великого О, яка часова складність методу append класу list. ОБЕРЕЖНО: важлива точна відповідь.

Часова складність методу append класу list в цілому і найчастіше буде О(1). Але місце у пам'яті для масиву
покажчиків розподіляється заздалегідь i коли зайнятий обсяг пам'яті виснажується, інтерпретатор виділяє
приблизно 15% від обсягу масиву. Це іноді дещо уповільнює додавання нових елементів до списку,
тому O(1) це буде умовно, або приблизно ~O(1).


Завдання 2.
Напишіть в нотації Великого О, яка часова складність перевірки входження елементу в список. Наприклад: elem in my_list.

Щоб знайти значення в списку необхідно обходити кожне посилання і перевіряти вміст на рівність.
Тому часова складність перевірки входження елементу в список, наприклад, elem in my_list буде дорівнювати О(n).


Завдання 3.
Напишіть в нотації Великого О, яка часова складність методу pop класу list.
а) в загальному випадку
б) конкретно для випадку без параметру або з параметром -1.

а) В загальному випадку часова складність методу pop(i) буде становити О(n), так как після того, як буде
видалений елемент із середини або початку, потрібно передвинути всі наступні за ним на 1 позицію вперед.
б) Для випадку без параметру або з параметром -1 часова складність становить О(1), так как при видалені елемента
з кінця списку не треба робити описаного в а).


Завдання 4.
Напишіть в нотації Великого О, яка часова складність додавання елементу в словник. ОБЕРЕЖНО: важлива точна відповідь.

При одноразовому додаванні елемента в словник часова складніть буде становити О(1). Однак, в випадку розширення словника,
часова складніть буде дорівнювати О(n)


Завдання 5.
Напишіть в нотації Великого О, яка часова складність перевірки входження елементу в словник. Наприклад: elem in my_dict.

Часова складніть перевірки входження елементу в словник буде становити О(1), так как це просте отримання елемента по ключу.


Завдання 6.
Напишіть в нотації Великого О, яка часова складність даного коду, якщо в списку value є N елементів:
if isinstance(value, list):
    for i in range(0, 100, 3):
        if i in value:
            value.remove(i)

О(1 + 34 + 66 + 33n + n) = O(101 + 34n)

Завдання 7.
Напишіть в нотації Великого О, яка часова складність даного коду, якщо в списку a є N елементів:
work_list = [*a]
for i in range(len(work_list)):
    for j in range(1, len(work_list)):
        if work_list[j-1] > work_list[j]:
            buffer = work_list[j-1]
            work_list[j-1] = work_list[j]
            work_list[j] = buffer

О(1 + 1 + 2n + n + 1 + n(1 + 2n + n + 1 + 3n + 3n + 2n) = O(3 + 3n + n(2 + 11n) = O(3 + 5n + 11(n**2))


Завдання 8.
Напишіть в нотації Великого О, яка часова складність даного коду, якщо в списку some_list є N елементів:
result = {}
for elem in some_list:
    if elem not in result:
        result[elem] = True

o(1 + n + 2n + 1) = O(2 + 3n)